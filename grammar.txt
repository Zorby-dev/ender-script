statements            = <nl>* expression (<nl>+ expression)* <nl>*

expression            = comparison-expression ((<keyword["and"]>|<keyword["or"]>|<and>|<or>) comparison-expression)*

comparison-expression = (<keyword["not"]>|<not>) comparison-expression
                      = arithmetic-expression ((<ee>|<ne>|<lt>|<gt>|<lte>|<gte>) arithmetic-expression)*

arithmetic-expression = term ((<plus>|<minus>) term)*

term                  = factor ((<mul>|<div>) factor)*

factor                = (<int>|<float>|<string>|<id>)
                      = (<plus>|<minus>) factor
                      = <lparen> expression <rparen>
                      = if-expression
                      = for-expression
                      = while-expression
                      = function-declaration
                      = <id> arguments                                                                                                 //function-call
                      = <id> <colon> <id>|(<id>? <eq> expression)                                                                      //variable-declaration
                      = <id> <eq> expression                                                                                           //variable-assign

if-expression         = <keyword["if"]> <lparen> expression <rparen> ((<lcparen> statements <rcparen>)|expression)
                        (<keyword["else"]> ((<lcparen> statements <rcparen>)|expression))?

//for-expression      = <keyword["for"]> <lparen> <id> <keyword["in"]> <id> <rparen> ((<lcparen> statements <rcparen>)|expression)

while-expression      = <keyword["while"]> <lparen> expression <rparen> ((<lcparen> statements <rcparen>)|expression)

function-declaration  = <keyword["function"]> <id> parameters ((<lcparen> statements <rcparen>)|expression)

parameters            = <lparen> (variable-declaration (<comma> variable-declaration)*)? <rparen>

arguments             = <lparen> (expression (<comma> expression)*)? <rparen>